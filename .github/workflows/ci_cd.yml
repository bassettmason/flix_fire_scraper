name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build test image
      run: docker build -t test-image -f Dockerfile.test .

    - name: Run tests
      run: docker run test-image pytest api/tests



  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        export_default_credentials: true

    # Authenticate Docker with the Google Artifact Registry.
    - name: Authenticate Docker to Google Artifact Registry
      run: gcloud auth configure-docker us-west1-docker.pkg.dev

    # Build the Docker image and push it to the Artifact Registry.
    - name: Build and push production image to Artifact Registry
      run: |
        docker build -t us-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/media-djinn-registry/flix-fire-scraper-image:latest .
        docker push us-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/media-djinn-registry/flix-fire-scraper-image:latest

    # Terraform steps with environment variables set up.
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      run: terraform init

    - name: Apply Terraform changes
      env: 
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_gcp_credentials_file: ${{ secrets.GCP_CREDENTIALS_FILE_PATH }}
        TF_VAR_region: ${{ secrets.GCP_REGION }}
      run: terraform apply -auto-approve
